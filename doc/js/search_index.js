var search_data = {"index":{"searchIndex":["computer","game","gameboard","player","available_spaces()","clear_board()","draw()","make_decision()","make_decision()","new()","new()","new()","print_board()","start()","three_in_a_column?()","three_in_a_diagonal?()","three_in_a_row?()","victory_check?()","readme"],"longSearchIndex":["computer","game","gameboard","player","gameboard#available_spaces()","gameboard#clear_board()","gameboard#draw()","computer#make_decision()","player#make_decision()","game::new()","gameboard::new()","player::new()","gameboard#print_board()","game#start()","game#three_in_a_column?()","game#three_in_a_diagonal?()","game#three_in_a_row?()","game#victory_check?()",""],"info":[["Computer","","Computer.html","","<p>Opponent\n<p>This class acts as your adversary and inherits the attributes and\nfunctionality of the Player …\n"],["Game","","Game.html","","<p>Referee\n<p>This class acts as the container for all of the other defined classes and\nexecutes all interactions …\n"],["GameBoard","","GameBoard.html","","<p>The Board\n<p>This class is reponsible for maintaining the state of the X&#39;s and\nO&#39;s at any given time …\n"],["Player","","Player.html","","<p>You\n<p>This class represents the user of this game and provides access to whether\nor not you are “X&#39;s” …\n"],["available_spaces","GameBoard","GameBoard.html#method-i-available_spaces","()","<p>Returns an array of arrays. Each child array has two elements, the\nx-coordinate and the y-coordinate …\n"],["clear_board","GameBoard","GameBoard.html#method-i-clear_board","()","<p>Fills in every spot with the empty character “_”.\n"],["draw","GameBoard","GameBoard.html#method-i-draw","(letter, x_coordinate, y_coordinate)","<p>Given the current player&#39;s letter and desired coordinates, draw their\nletter on the board.\n"],["make_decision","Computer","Computer.html#method-i-make_decision","(available)","<p>Takes input array of available x,y coordinates and returns an array\nconsisiting of the Computer&#39;s …\n"],["make_decision","Player","Player.html#method-i-make_decision","()","<p>Takes input for the x-coordinate and the y-coordinate of the desired space\nand returns an array containing …\n"],["new","Game","Game.html#method-c-new","()","<p>Create GameBoard, Player, and Computer objects and start the game.\n"],["new","GameBoard","GameBoard.html#method-c-new","()","<p>Creates the empty 3X3 board.\n"],["new","Player","Player.html#method-c-new","(letter)","<p>Assigns the user&#39;s choice of letter for the remainder of the program\nexecution.\n"],["print_board","GameBoard","GameBoard.html#method-i-print_board","()","<p>Formats and prints the board the the screen with “_” representing an empty\nspot.\n"],["start","Game","Game.html#method-i-start","()","<p>Executes loop of decision making, drawing to board, and checking for  tie\nor victory until one of those …\n"],["three_in_a_column?","Game","Game.html#method-i-three_in_a_column-3F","()","<p>Loops though each column to check for 3 consecutive occurrences of a letter\nand returns an array with …\n"],["three_in_a_diagonal?","Game","Game.html#method-i-three_in_a_diagonal-3F","()","<p>Loops though each diagonal to check for 3 consecutive occurrences of a\nletter and returns an array with …\n"],["three_in_a_row?","Game","Game.html#method-i-three_in_a_row-3F","()","<p>Loops though each row to check for 3 consecutive occurrences of a letter\nand returns an array with a …\n"],["victory_check?","Game","Game.html#method-i-victory_check-3F","()","<p>Checks for 3 in a row, column, and diagonal and stores results in an array.\nThe array is checked for …\n"],["README","","README_md.html","","<p>Tic Tac Toe\n<p>This project is to demonstrate understanding of Object Oriented Programming\nprinciples with …\n"]]}}